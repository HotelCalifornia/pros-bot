 ;Function ; ; ; ;
 ;Function ; ; ; ;
bool isAutonomous(); ;Function ;isAutonomous() ;isautonomous ;bool ;
bool isEnabled(); ;Function ;isEnabled() ;isenabled ;bool ;
bool isJoystickConnected(unsigned char joystick); ;Function ;isJoystickConnected(unsigned char joystick) ;isjoystickconnected ;bool ;
bool isOnline(); ;Function ;isOnline() ;isonline ;bool ;
int joystickGetAnalog(unsigned char joystick, unsigned char axis); ;Function ;joystickGetAnalog(unsigned char joystick, unsigned char axis) ;joystickgetanalog ;int ;
bool joystickGetDigital(unsigned char joystick, unsigned char buttonGroup, ;Function ;joystickGetDigital(unsigned char joystick, unsigned char buttonGroup ;joystickgetdigital ;bool ;
	unsigned char button); ;Function ;unsigned char button) ;unsigned char button) ; ;
unsigned int powerLevelBackup(); ;Function ;powerLevelBackup() ;powerlevelbackup ;unsigned int ;
unsigned int powerLevelMain(); ;Function ;powerLevelMain() ;powerlevelmain ;unsigned int ;
void setTeamName(const char *name); ;Function ;setTeamName(const char *name) ;setteamname ;void ;
 ;Function ; ; ; ;
 ;Function ; ; ; ;
 ;Function ; ; ; ;
 ;Function ; ; ; ;
int analogCalibrate(unsigned char channel); ;Function ;analogCalibrate(unsigned char channel) ;analogcalibrate ;int ;the average sensor value computed by this function
int analogRead(unsigned char channel); ;Function ;analogRead(unsigned char channel) ;analogread ;int ;the analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V
int analogReadCalibrated(unsigned char channel); ;Function ;analogReadCalibrated(unsigned char channel) ;analogreadcalibrated ;int ;the difference of the sensor value from its calibrated default from -4095 to 4095
int analogReadCalibratedHR(unsigned char channel); ;Function ;analogReadCalibratedHR(unsigned char channel) ;analogreadcalibratedhr ;int ;the difference of the sensor value from its calibrated default from -16384 to 16384
bool digitalRead(unsigned char pin); ;Function ;digitalRead(unsigned char pin) ;digitalread ;bool ;true if the pin is HIGH, or false if it is LOW
void digitalWrite(unsigned char pin, bool value); ;Function ;digitalWrite(unsigned char pin, bool value) ;digitalwrite ;void ;true if the pin is HIGH, or false if it is LOW
void pinMode(unsigned char pin, unsigned char mode); ;Function ;pinMode(unsigned char pin, unsigned char mode) ;pinmode ;void ;true if the pin is HIGH, or false if it is LOW
 ;Function ; ; ; ;true if the pin is HIGH, or false if it is LOW
/* ;Function ; ; ; ;true if the pin is HIGH, or false if it is LOW
 * Digital port 10 cannot be used as an interrupt port, or for an encoder. Plan accordingly. ;Function ;* Digital port 10 cannot be used as an interrupt port, or for an encoder. Plan accordingly ;* digital port 10 cannot be used as an interrupt port, or for an encoder. plan accordingly ; ;true if the pin is HIGH, or false if it is LOW
 */ ;Function ;* ;* ; ;true if the pin is HIGH, or false if it is LOW
 ;Function ; ; ; ;true if the pin is HIGH, or false if it is LOW
typedef void (*InterruptHandler)(unsigned char pin); ;Function ;void (*InterruptHandler)(unsigned char pin) ;void  ;typedef ;true if the pin is HIGH, or false if it is LOW
 ;Function ; ; ; ;true if the pin is HIGH, or false if it is LOW
void ioClearInterrupt(unsigned char pin); ;Function ;ioClearInterrupt(unsigned char pin) ;ioclearinterrupt ;void ;true if the pin is HIGH, or false if it is LOW
void ioSetInterrupt(unsigned char pin, unsigned char edges, InterruptHandler handler); ;Function ;ioSetInterrupt(unsigned char pin, unsigned char edges, InterruptHandler handler) ;iosetinterrupt ;void ;true if the pin is HIGH, or false if it is LOW
 ;Function ; ; ; ;true if the pin is HIGH, or false if it is LOW
 ;Function ; ; ; ;true if the pin is HIGH, or false if it is LOW
int motorGet(unsigned char channel); ;Function ;motorGet(unsigned char channel) ;motorget ;int ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
void motorSet(unsigned char channel, int speed); ;Function ;motorSet(unsigned char channel, int speed) ;motorset ;void ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
void motorStop(unsigned char channel); ;Function ;motorStop(unsigned char channel) ;motorstop ;void ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
void motorStopAll(); ;Function ;motorStopAll() ;motorstopall ;void ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
 ;Function ; ; ; ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
void speakerInit(); ;Function ;speakerInit() ;speakerinit ;void ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
void speakerPlayArray(const char * * songs); ;Function ;speakerPlayArray(const char * * songs) ;speakerplayarray ;void ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
void speakerPlayRtttl(const char *song); ;Function ;speakerPlayRtttl(const char *song) ;speakerplayrtttl ;void ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
void speakerShutdown(); ;Function ;speakerShutdown() ;speakershutdown ;void ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
 ;Function ; ; ; ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
 ;Function ; ; ; ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
 ;Function ; ; ; ;the speed last sent to this channel; -127 is full reverse and 127 is full forward, with 0 being off
unsigned int imeInitializeAll(); ;Function ;imeInitializeAll() ;imeinitializeall ;unsigned int ;the number of IMEs successfully initialized.
bool imeGet(unsigned char address, int *value); ;Function ;imeGet(unsigned char address, int *value) ;imeget ;bool ;true if the count was successfully read and the value stored in *value is valid; false otherwise
bool imeGetVelocity(unsigned char address, int *value); ;Function ;imeGetVelocity(unsigned char address, int *value) ;imegetvelocity ;bool ;true if the velocity was successfully read and the value stored in *value is valid; false otherwise
bool imeReset(unsigned char address); ;Function ;imeReset(unsigned char address) ;imereset ;bool ;true if the reset succeeded; false otherwise
void imeShutdown(); ;Function ;imeShutdown() ;imeshutdown ;void ;true if the reset succeeded; false otherwise
 ;Function ; ; ; ;true if the reset succeeded; false otherwise
typedef void * Gyro; ;Function ;void * Gyro ;void * gyro ;typedef ;true if the reset succeeded; false otherwise
 ;Function ; ; ; ;true if the reset succeeded; false otherwise
int gyroGet(Gyro gyro); ;Function ;gyroGet(Gyro gyro) ;gyroget ;int ;the signed and cumulative number of degrees rotated around the gyro's vertical axis since the last start or reset
Gyro gyroInit(unsigned char port, unsigned short multiplier); ;Function ;gyroInit(unsigned char port, unsigned short multiplier) ;gyroinit ;Gyro ;a Gyro object to be stored and used for later calls to gyro functions
void gyroReset(Gyro gyro); ;Function ;gyroReset(Gyro gyro) ;gyroreset ;void ;a Gyro object to be stored and used for later calls to gyro functions
void gyroShutdown(Gyro gyro); ;Function ;gyroShutdown(Gyro gyro) ;gyroshutdown ;void ;a Gyro object to be stored and used for later calls to gyro functions
 ;Function ; ; ; ;a Gyro object to be stored and used for later calls to gyro functions
typedef void * Encoder; ;Function ;void * Encoder ;void * encoder ;typedef ;a Gyro object to be stored and used for later calls to gyro functions
int encoderGet(Encoder enc); ;Function ;encoderGet(Encoder enc) ;encoderget ;int ;the signed and cumulative number of counts since the last start or reset
Encoder encoderInit(unsigned char portTop, unsigned char portBottom, bool reverse); ;Function ;encoderInit(unsigned char portTop, unsigned char portBottom, bool reverse) ;encoderinit ;Encoder ;an Encoder object to be stored and used for later calls to encoder functions
void encoderReset(Encoder enc); ;Function ;encoderReset(Encoder enc) ;encoderreset ;void ;an Encoder object to be stored and used for later calls to encoder functions
void encoderShutdown(Encoder enc); ;Function ;encoderShutdown(Encoder enc) ;encodershutdown ;void ;an Encoder object to be stored and used for later calls to encoder functions
 ;Function ; ; ; ;an Encoder object to be stored and used for later calls to encoder functions
typedef void * Ultrasonic; ;Function ;void * Ultrasonic ;void * ultrasonic ;typedef ;an Encoder object to be stored and used for later calls to encoder functions
int ultrasonicGet(Ultrasonic ult); ;Function ;ultrasonicGet(Ultrasonic ult) ;ultrasonicget ;int ;the distance to the nearest object in centimeters
Ultrasonic ultrasonicInit(unsigned char portEcho, unsigned char portPing); ;Function ;ultrasonicInit(unsigned char portEcho, unsigned char portPing) ;ultrasonicinit ;Ultrasonic ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
void ultrasonicShutdown(Ultrasonic ult); ;Function ;ultrasonicShutdown(Ultrasonic ult) ;ultrasonicshutdown ;void ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
bool i2cRead(uint8_t addr, uint8_t *data, uint16_t count); ;Function ;i2cRead(uint8_t addr, uint8_t *data, uint16_t count) ;i2cread ;bool ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
bool i2cReadRegister(uint8_t addr, uint8_t reg, uint8_t *value, uint16_t count); ;Function ;i2cReadRegister(uint8_t addr, uint8_t reg, uint8_t *value, uint16_t count) ;i2creadregister ;bool ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
bool i2cWrite(uint8_t addr, uint8_t *data, uint16_t count); ;Function ;i2cWrite(uint8_t addr, uint8_t *data, uint16_t count) ;i2cwrite ;bool ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
bool i2cWriteRegister(uint8_t addr, uint8_t reg, uint16_t value); ;Function ;i2cWriteRegister(uint8_t addr, uint8_t reg, uint16_t value) ;i2cwriteregister ;bool ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
typedef int FILE; ;Function ;int FILE ;int file ;typedef ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
void usartInit(FILE *usart, unsigned int baud, unsigned int flags); ;Function ;usartInit(FILE *usart, unsigned int baud, unsigned int flags) ;usartinit ;void ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
void usartShutdown(FILE *usart); ;Function ;usartShutdown(FILE *usart) ;usartshutdown ;void ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#ifndef EOF ;Function ;ifndef EO ;ifndef eo ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#endif ;Function ;endi ;endi ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#ifndef SEEK_SET ;Function ;ifndef SEEK_SE ;ifndef seek_se ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#define	SEEK_SET 0 ;Function ;define	SEEK_SET ;define	seek_set ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#endif ;Function ;endi ;endi ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#ifndef SEEK_CUR ;Function ;ifndef SEEK_CU ;ifndef seek_cu ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#define	SEEK_CUR 1 ;Function ;define	SEEK_CUR ;define	seek_cur ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#endif ;Function ;endi ;endi ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#ifndef SEEK_END ;Function ;ifndef SEEK_EN ;ifndef seek_en ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#define	SEEK_END 2 ;Function ;define	SEEK_END ;define	seek_end ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
#endif ;Function ;endi ;endi ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
 ;Function ; ; ; ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
void fclose(FILE *stream); ;Function ;fclose(FILE *stream) ;fclose ;void ;an Ultrasonic object to be stored and used for later calls to ultrasonic functions
int fcount(FILE *stream); ;Function ;fcount(FILE *stream) ;fcount ;int ;the number of characters which meet this criterion; if this number cannot be determined, returns 0
int fdelete(const char *file); ;Function ;fdelete(const char *file) ;fdelete ;int ;0 if the file was deleted, or 1 if the file could not be found
int feof(FILE *stream); ;Function ;feof(FILE *stream) ;feof ;int ;0 if the stream is not at EOF, or 1 otherwise.
int fflush(FILE *stream); ;Function ;fflush(FILE *stream) ;fflush ;int ;0 if the data was successfully flushed, EOF otherwise
int fgetc(FILE *stream); ;Function ;fgetc(FILE *stream) ;fgetc ;int ;the next character from 0 to 255, or -1 if no character can be read
char* fgets(char *str, int num, FILE *stream); ;Function ;fgets(char *str, int num, FILE *stream) ;fgets ;char* ;str, or NULL if zero characters could be read
FILE * fopen(const char *file, const char *mode); ;Function ;* fopen(const char *file, const char *mode) ;* fopen ;FILE ;a file descriptor pointing to the new file, or NULL if the file could not be opened
void fprint(const char *string, FILE *stream); ;Function ;fprint(const char *string, FILE *stream) ;fprint ;void ;a file descriptor pointing to the new file, or NULL if the file could not be opened
int fputc(int value, FILE *stream); ;Function ;fputc(int value, FILE *stream) ;fputc ;int ;the character written
int fputs(const char *string, FILE *stream); ;Function ;fputs(const char *string, FILE *stream) ;fputs ;int ;the number of characters written, excluding the new line
size_t fread(void *ptr, size_t size, size_t count, FILE *stream); ;Function ;fread(void *ptr, size_t size, size_t count, FILE *stream) ;fread ;size_t ;the number of bytes successfully read
int fseek(FILE *stream, long int offset, int origin); ;Function ;fseek(FILE *stream, long int offset, int origin) ;fseek ;int ;0 if the seek was successful, or 1 otherwise
long int ftell(FILE *stream); ;Function ;ftell(FILE *stream) ;ftell ;long int ;the offset of the stream, or -1 if the offset could not be determined
size_t fwrite(const void *ptr, size_t size, size_t count, FILE *stream); ;Function ;fwrite(const void *ptr, size_t size, size_t count, FILE *stream) ;fwrite ;size_t ;the number of bytes successfully written
int getchar(); ;Function ;getchar() ;getchar ;int ;the next character from 0 to 255, or -1 if no character can be read
void print(const char *string); ;Function ;print(const char *string) ;print ;void ;the next character from 0 to 255, or -1 if no character can be read
int putchar(int value); ;Function ;putchar(int value) ;putchar ;int ;the character written
int puts(const char *string); ;Function ;puts(const char *string) ;puts ;int ;the number of characters written, excluding the new line
 ;Function ; ; ; ;the number of characters written, excluding the new line
int fprintf(FILE *stream, const char *formatString, ...); ;Function ;fprintf(FILE *stream, const char *formatString, ...) ;fprintf ;int ;the number of characters written
int printf(const char *formatString, ...); ;Function ;printf(const char *formatString, ...) ;printf ;int ;the number of characters written
int snprintf(char *buffer, size_t limit, const char *formatString, ...); ;Function ;snprintf(char *buffer, size_t limit, const char *formatString, ...) ;snprintf ;int ;the number of characters stored
int sprintf(char *buffer, const char *formatString, ...); ;Function ;sprintf(char *buffer, const char *formatString, ...) ;sprintf ;int ;the number of characters stored
 ;Function ; ; ; ;the number of characters stored
 ;Function ; ; ; ;the number of characters stored
void lcdClear(FILE *lcdPort); ;Function ;lcdClear(FILE *lcdPort) ;lcdclear ;void ;the number of characters stored
void lcdInit(FILE *lcdPort); ;Function ;lcdInit(FILE *lcdPort) ;lcdinit ;void ;the number of characters stored
#ifdef DOXYGEN ;Function ;ifdef DOXYGE ;ifdef doxyge ; ;the number of characters stored
void lcdPrint(FILE *lcdPort, unsigned char line, const char *formatString, ...); ;Function ;lcdPrint(FILE *lcdPort, unsigned char line, const char *formatString, ...) ;lcdprint ;void ;the number of characters stored
#else ;Function ;els ;els ; ;the number of characters stored
void __attribute__ ((format (printf, 3, 4))) lcdPrint(FILE *lcdPort, unsigned char line, ;Function ;__attribute__ ((format (printf, 3, 4))) lcdPrint(FILE *lcdPort, unsigned char line ;__attribute__  ;void ;the number of characters stored
	const char *formatString, ...); ;Function ;const char *formatString, ...) ;const char *formatstring, ...) ; ;the number of characters stored
#endif ;Function ;endi ;endi ; ;the number of characters stored
unsigned int lcdReadButtons(FILE *lcdPort); ;Function ;lcdReadButtons(FILE *lcdPort) ;lcdreadbuttons ;unsigned int ;the buttons pressed as a bit mask
void lcdSetBacklight(FILE *lcdPort, bool backlight); ;Function ;lcdSetBacklight(FILE *lcdPort, bool backlight) ;lcdsetbacklight ;void ;the buttons pressed as a bit mask
void lcdSetText(FILE *lcdPort, unsigned char line, const char *buffer); ;Function ;lcdSetText(FILE *lcdPort, unsigned char line, const char *buffer) ;lcdsettext ;void ;the buttons pressed as a bit mask
void lcdShutdown(FILE *lcdPort); ;Function ;lcdShutdown(FILE *lcdPort) ;lcdshutdown ;void ;the buttons pressed as a bit mask
 ;Function ; ; ; ;the buttons pressed as a bit mask
Error on line  1253
 ;Function ; ; ; ;the buttons pressed as a bit mask
 ;Function ; ; ; ;the buttons pressed as a bit mask
typedef void * TaskHandle; ;Function ;void * TaskHandle ;void * taskhandle ;typedef ;the buttons pressed as a bit mask
typedef void * Mutex; ;Function ;void * Mutex ;void * mutex ;typedef ;the buttons pressed as a bit mask
typedef void * Semaphore; ;Function ;void * Semaphore ;void * semaphore ;typedef ;the buttons pressed as a bit mask
typedef void (*TaskCode)(void *); ;Function ;void (*TaskCode)(void *) ;void  ;typedef ;the buttons pressed as a bit mask
 ;Function ; ; ; ;the buttons pressed as a bit mask
TaskHandle taskCreate(TaskCode taskCode, const unsigned int stackDepth, void *parameters, ;Function ;taskCreate(TaskCode taskCode, const unsigned int stackDepth, void *parameters ;taskcreate ;TaskHandle ;a handle to the created task, or NULL if an error occurred
	const unsigned int priority); ;Function ;const unsigned int priority) ;const unsigned int priority) ; ;a handle to the created task, or NULL if an error occurred
void taskDelay(const unsigned long msToDelay); ;Function ;taskDelay(const unsigned long msToDelay) ;taskdelay ;void ;a handle to the created task, or NULL if an error occurred
void taskDelayUntil(unsigned long *previousWakeTime, const unsigned long cycleTime); ;Function ;taskDelayUntil(unsigned long *previousWakeTime, const unsigned long cycleTime) ;taskdelayuntil ;void ;a handle to the created task, or NULL if an error occurred
void taskDelete(TaskHandle taskToDelete); ;Function ;taskDelete(TaskHandle taskToDelete) ;taskdelete ;void ;a handle to the created task, or NULL if an error occurred
unsigned int taskGetCount(); ;Function ;taskGetCount() ;taskgetcount ;unsigned int ;the number of tasks that are currently running, waiting, or suspended
unsigned int taskGetState(TaskHandle task); ;Function ;taskGetState(TaskHandle task) ;taskgetstate ;unsigned int ;A value reflecting the task's status, one of the constants TASK_DEAD, TASK_RUNNING, TASK_RUNNABLE, TASK_SLEEPING, or TASK_SUSPENDED
unsigned int taskPriorityGet(const TaskHandle task); ;Function ;taskPriorityGet(const TaskHandle task) ;taskpriorityget ;unsigned int ;the priority of that task from 0 to TASK_MAX_PRIORITIES
void taskPrioritySet(TaskHandle task, const unsigned int newPriority); ;Function ;taskPrioritySet(TaskHandle task, const unsigned int newPriority) ;taskpriorityset ;void ;the priority of that task from 0 to TASK_MAX_PRIORITIES
void taskResume(TaskHandle taskToResume); ;Function ;taskResume(TaskHandle taskToResume) ;taskresume ;void ;the priority of that task from 0 to TASK_MAX_PRIORITIES
TaskHandle taskRunLoop(void (*fn)(void), const unsigned long increment); ;Function ;taskRunLoop(void (*fn)(void), const unsigned long increment) ;taskrunloop ;TaskHandle ;a handle to the task, or NULL if an error occurred
void taskSuspend(TaskHandle taskToSuspend); ;Function ;taskSuspend(TaskHandle taskToSuspend) ;tasksuspend ;void ;a handle to the task, or NULL if an error occurred
 ;Function ; ; ; ;a handle to the task, or NULL if an error occurred
Semaphore semaphoreCreate(); ;Function ;semaphoreCreate() ;semaphorecreate ;Semaphore ;a handle to the created semaphore
bool semaphoreGive(Semaphore semaphore); ;Function ;semaphoreGive(Semaphore semaphore) ;semaphoregive ;bool ;true if the semaphore was successfully given, or false if the semaphore was not taken since the last give
bool semaphoreTake(Semaphore semaphore, const unsigned long blockTime); ;Function ;semaphoreTake(Semaphore semaphore, const unsigned long blockTime) ;semaphoretake ;bool ;true if the semaphore was successfully taken, or false if the timeout expired
void semaphoreDelete(Semaphore semaphore); ;Function ;semaphoreDelete(Semaphore semaphore) ;semaphoredelete ;void ;true if the semaphore was successfully taken, or false if the timeout expired
 ;Function ; ; ; ;true if the semaphore was successfully taken, or false if the timeout expired
Mutex mutexCreate(); ;Function ;mutexCreate() ;mutexcreate ;Mutex ;a handle to the created mutex
bool mutexGive(Mutex mutex); ;Function ;mutexGive(Mutex mutex) ;mutexgive ;bool ;true if the mutex was released, or false if the mutex was not already held
bool mutexTake(Mutex mutex, const unsigned long blockTime); ;Function ;mutexTake(Mutex mutex, const unsigned long blockTime) ;mutextake ;bool ;true if the mutex was successfully taken, or false if the timeout expired
void mutexDelete(Mutex mutex); ;Function ;mutexDelete(Mutex mutex) ;mutexdelete ;void ;true if the mutex was successfully taken, or false if the timeout expired
 ;Function ; ; ; ;true if the mutex was successfully taken, or false if the timeout expired
void delay(const unsigned long time); ;Function ;delay(const unsigned long time) ;delay ;void ;true if the mutex was successfully taken, or false if the timeout expired
void delayMicroseconds(const unsigned long us); ;Function ;delayMicroseconds(const unsigned long us) ;delaymicroseconds ;void ;true if the mutex was successfully taken, or false if the timeout expired
unsigned long micros(); ;Function ;micros() ;micros ;unsigned long ;the number of microseconds since the Cortex was turned on or the last overflow
unsigned long millis(); ;Function ;millis() ;millis ;unsigned long ;the number of milliseconds since the Cortex was turned on
void wait(const unsigned long time); ;Function ;wait(const unsigned long time) ;wait ;void ;the number of milliseconds since the Cortex was turned on
void waitUntil(unsigned long *previousWakeTime, const unsigned long time); ;Function ;waitUntil(unsigned long *previousWakeTime, const unsigned long time) ;waituntil ;void ;the number of milliseconds since the Cortex was turned on
void watchdogInit(); ;Function ;watchdogInit() ;watchdoginit ;void ;the number of milliseconds since the Cortex was turned on
void standaloneModeEnable(); ;Function ;standaloneModeEnable() ;standalonemodeenable ;void ;the number of milliseconds since the Cortex was turned on
 ;Function ; ; ; ;the number of milliseconds since the Cortex was turned on
// End C++ extern to C ;Function ;/ End C++ extern to ;/ end c++ extern to ; ;the number of milliseconds since the Cortex was turned on
#ifdef __cplusplus ;Function ;ifdef __cplusplu ;ifdef __cplusplu ; ;the number of milliseconds since the Cortex was turned on
} ;Function ; ; ; ;the number of milliseconds since the Cortex was turned on
#endif ;Function ;endi ;endi ; ;the number of milliseconds since the Cortex was turned on
 ;Function ; ; ; ;the number of milliseconds since the Cortex was turned on
#endif ;Function ;endi ;endi ; ;the number of milliseconds since the Cortex was turned on
 ;Function ; ; ; ;the number of milliseconds since the Cortex was turned on
Saved.
